name: Check Registry Updates

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout application repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Clone registry repository
      run: |
        git clone https://oauth2:${{ secrets.CLIPACK }}@github.com/lvim-tech/clipack-registry.git registry

    - name: Configure Git for registry
      run: |
        cd registry
        git config user.name 'github-actions[bot]'
        git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
        git config credential.helper 'store --file=.git/credentials'
        echo "https://oauth2:${{ secrets.CLIPACK }}@github.com" > .git/credentials
        chmod 600 .git/credentials

    - name: Install dependencies
      run: go mod download

    # Създайте временен файл, който ще модифицира оригиналния скрипт
    - name: Create token setup script
      run: |
        cat > token_setup.go << 'EOF'
        package main

        import (
            "fmt"
            "io/ioutil"
            "log"
            "os"
            "os/exec"
            "strings"
        )

        func main() {
            // 1. Прочитане на оригиналния скрипт
            scriptBytes, err := ioutil.ReadFile("scripts/check_registry.go")
            if err != nil {
                log.Fatalf("Error reading check_registry.go: %v", err)
            }
            
            // 2. Прочитане на токена от argс
            if len(os.Args) < 2 {
                log.Fatalf("Please provide token as argument")
            }
            
            token := os.Args[1]
            
            // 3. Заместване на проверката за GITHUB_TOKEN с директно задаване
            originalCode := string(scriptBytes)
            replacedCode := strings.Replace(
                originalCode,
                "token := os.Getenv(\"GITHUB_TOKEN\")\n\tif token == \"\" {\n\t\tlog.Fatalf(\"GITHUB_TOKEN environment variable is required\")\n\t}",
                fmt.Sprintf("token := \"%s\" // Директно зададен токен", token),
                1,
            )
            
            // 4. Запазване на модифицирания файл
            err = ioutil.WriteFile("modified_check_registry.go", []byte(replacedCode), 0644)
            if err != nil {
                log.Fatalf("Error writing modified_check_registry.go: %v", err)
            }
            
            // 5. Изпълнение на модифицирания скрипт
            cmd := exec.Command("go", "run", "modified_check_registry.go")
            cmd.Stdout = os.Stdout
            cmd.Stderr = os.Stderr
            if err := cmd.Run(); err != nil {
                log.Fatalf("Error running script: %v", err)
            }
        }
        EOF

    # Изпълнение на скрипта за настройка с токена като аргумент
    - name: Run registry check with token setup
      run: go run token_setup.go "${{ secrets.CLIPACK }}"
